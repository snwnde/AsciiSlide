name: Build, Push and Deploy

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
    branches:
      - '*'

env:
  IMAGE_NAME: asciislide

jobs:
  cleanup:
    runs-on: ubuntu-latest
    permissions: write-all

    steps:
      - name: Clean up deployments
        uses: strumwolf/delete-deployment-environment@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          environment: github-pages
          onlyRemoveDeployments: true

  build-and-push:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=pep440,pattern={{version}}
            type=raw,value=latest,branches=main

      -
        name: Login to GitHub Container Registry
        if: github.ref_type == 'tag' # Only login when it's a tag push
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      -
        name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.ref_type == 'tag' }} # Push only when it's a tag push
          load: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      -
        name: Save Docker image
        run: docker save -o image.tar ${{ env.IMAGE_NAME }}:latest

      -
        name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  build-example:
    runs-on: ubuntu-22.04
    needs: build-and-push

    steps:
      -
        name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      -
        name: Load Docker image
        run: docker load -i image.tar
      -
        name: Checkout code
        uses: actions/checkout@v3
      -
        name: Run example build with Docker
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ env.IMAGE_NAME }}:latest
          options: -v ${{ github.workspace }}/example:/asciislide/src/example -v ${{ github.workspace }}/public:/asciislide/build -u root
          run: |
            make
            cp -r assets build/assets
            mv build/example build/_example
            mkdir -p build/example/html
            cp -r build/_example/* build/example/html
            rm -rf build/_example
            echo '<!DOCTYPE html>
            <html lang="en">
            <head>
                <meta http-equiv="refresh" content="0; url=./example/html/main.html">
                <title>Redirecting...</title>
            </head>
            <body>
                <p>If you are not redirected automatically, follow this <a href="./example/html/main.html">link to main.html</a>.</p>
            </body>
            </html>' > build/index.html
      -
        name: Upload example artifact
        uses: actions/upload-artifact@v4
        with:
          name: example-build
          path: ${{ github.workspace }}/public
          if-no-files-found: error

  deploy-example:
    runs-on: ubuntu-22.04
    needs: [build-example, cleanup]
    permissions:
      contents: write

    steps:
      -
        name: Download example artifact
        uses: actions/download-artifact@v4
        with:
          name: example-build
          path: ${{ github.workspace }}/public

      -
        name: Verify artifact exists
        run: |
          if [ ! -d ${{ github.workspace }}/public ]; then
            echo "No artifact found, skipping deployment."
            exit 1
          fi

      -
        name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ${{ github.workspace }}/public
          force_orphan: true
